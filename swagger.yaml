openapi: 3.0.3
info:
  title: Location Application
  description: |-
    This is a simple application to send back a JSON object when we have the postal address of UK location.

    _This is just a basic application created by using `express generator`_
    Some sample postCodes `B97 6AS, SE1P 4RR`
    
    Libraries that i am using:
    - [Express Generator](https://expressjs.com/en/starter/generator.html)
    - [Unit Testing Framework - Mocha](https://mochajs.org/)
    - [Assertion Library - Chaijs](https://www.chaijs.com/)
  contact:
    email: antonyjeban@gmail.com
  license:
    name: MIT License
    url: https://mit-license.org/
  version: 1.0.11
externalDocs:
  description: Find out more about Location application - Documentation
  url: http://localhost:4500/api-docs/
servers:
  - url: http://localhost:4500
tags:
  - name: restaurants
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://localhost:4500/api-docs/
paths:
  /restaurants/{postalCode}:
    get:
      tags:
        - restaurants
      summary: List of Restaurants.
      description: This would list all the restaurants.
      operationId: listRestaurants
      parameters:
        - name: postalCode
          in: path
          description: Gets the nearby restaurants for the provided postal code.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid postal code supplied
        '404':
          description: Postal code  not found
  /restaurants/random-postcodes:
    get:
      tags:
        - restaurants
      summary: Gets a random post code.
      description: This get a random postal code.
      operationId: randomCode
      responses:
        '200':
          description: Success
components:
  schemas:
    Restaurants:
      type: object
      properties:
        streetResults:
          xml:
            name: streetResults
            wrapped: true
          type: array
          items:
            $ref: '#/components/schemas/Restaurant'
    Restaurant:
      type: object
      properties:
        postcode:
          type: string
        quality:
          type: integer
          format: int32
        eastings:
          type: integer
          format: int32
        northings:
          type: integer
          format: int32
        country:
          type: string
        nhs_ha:
          type: string
        longitude:
          type: integer
          format: int32
        latitude:
          type: integer
          format: int32
        european_electoral_region:
          type: string
        primary_care_trust:
          type: string
        region:
          type: string
        lsoa:
          type: string
        msoa:
          type: string
        incode:
          type: string
        outcode:
          type: string
        parliamentary_constituency:
          type: string
        admin_district:
          type: string
        parish:
          type: string
        admin_county:
          type: string
        admin_ward:
          type: string
        ced:
          type: string
        ccg:
          type: string
        nuts:
          type: string
        codes:
          type: string

      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        streetResults:
          type: object
        restaurants:
          type: array
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
